

# 載入套件 ----
# 初次使用時需先安裝以下套件：
# install.packages("devtools")
# devtools::install_github("ccolonescu/POE5Rdata")
# install.packages(c("dplyr", "ggplot2", "car", "msm"))

library(devtools)
library(POE5Rdata)
library(dplyr)
library(ggplot2)
library(car)    # 提供 linearHypothesis 檢定
library(msm)    # 提供 deltamethod 函數 (本題未用到)

# 載入資料 ----
data <- commute5

# 資料簡要檢查 ----
head(data)
tail(data)
nrow(data)

# (a) 建立迴歸模型 ----
# time = β1 + β2 * depart + β3 * reds + β4 * trains + e
model <- lm(time ~ depart + reds + trains, data = data)
summary(model)

# (b) 各係數的 95% 信賴區間 ----
ci <- confint(model)
print(ci)

# (c) 檢定紅燈延遲是否 < 2 分鐘 ----
# H0: β3 >= 2；H1: β3 < 2（左尾檢定）
beta3 <- coef(model)["reds"]
se_beta3 <- summary(model)$coefficients["reds", "Std. Error"]

t_stat_red <- (beta3 - 2) / se_beta3
p_value_red <- pnorm(t_stat_red)

cat("檢定 (c) - 紅燈延遲：t = ", t_stat_red, ", p = ", p_value_red, "\n")

ggplot(data, aes(x = reds, y = time)) +
  geom_point(color = "#2c3e50", alpha = 0.7) +
  geom_smooth(method = "lm", se = TRUE, color = "#e74c3c") +
  labs(
    title = "紅燈數與通勤時間的關係",
    x = "紅燈數 (reds)",
    y = "通勤時間 (minutes)"
  ) +
  theme_minimal()


# (d) 檢定火車延遲是否 = 3 分鐘（雙尾檢定，10% 顯著水準） ----
# H0: β4 = 3；H1: β4 ≠ 3
beta4 <- coef(model)["trains"]
se_beta4 <- summary(model)$coefficients["trains", "Std. Error"]

t_stat_train <- (beta4 - 3) / se_beta4
p_value_train <- 2 * (1 - pnorm(abs(t_stat_train)))

cat("檢定 (d) - 火車延遲：t = ", t_stat_train, ", p = ", p_value_train, "\n")

ggplot(data, aes(x = trains, y = time)) +
  geom_jitter(width = 0.2, height = 0, color = "#2980b9", alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, color = "#f39c12") +
  labs(
    title = "火車數與通勤時間的關係",
    x = "火車次數 (trains)",
    y = "通勤時間 (minutes)"
  ) +
  theme_light()



# (e) 檢定出發時間是否影響時間差異 10 分鐘 ----
# depart = 30 與 depart = 60 相差 30 分鐘，預期差異 Δtime = 30β2
# H0: β2 >= 0.3333；H1: β2 < 0.3333（左尾檢定）
beta2 <- coef(model)["depart"]
se_beta2 <- summary(model)$coefficients["depart", "Std. Error"]

t_stat_depart <- (beta2 - 0.3333) / se_beta2
p_value_depart <- pnorm(t_stat_depart)

cat("檢定 (e) - 出發時間影響：t = ", t_stat_depart, ", p = ", p_value_depart, "\n")


ggplot(data, aes(x = depart, y = time)) +
  geom_point(alpha = 0.6, color = "#16a085") +
  geom_smooth(method = "lm", se = TRUE, color = "#c0392b") +
  labs(
    title = "出發時間與通勤時間的關係",
    x = "出發時間（距離 6:30 AM 的分鐘數）",
    y = "通勤時間 (minutes)"
  ) +
  theme_classic()



# (f) 檢定火車延遲是否為紅燈延遲的三倍以上 ----
# H0: β4 >= 3β3；H1: β4 < 3β3（檢定 β4 - 3β3 < 0）
lh_test <- linearHypothesis(
  model,
  hypothesis.matrix = "trains - 3*reds = 0",
  test = "F"
)
print(lh_test)

ggplot(data, aes(x = trains, y = time)) +
  geom_jitter(width = 0.2, height = 0, color = "#2980b9", alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, color = "#f39c12") +
  labs(
    title = "火車數與通勤時間的關係",
    x = "火車次數 (trains)",
    y = "通勤時間 (minutes)"
  ) +
  theme_light()



# (g) 檢定是否能在 7:45 前到達 ----
# depart = 30，reds = 6，trains = 1
L <- c(1, 30, 6, 1)  # 對應 Intercept, depart, reds, trains
est_time <- sum(coef(model) * L)
cov_mat <- vcov(model)
se_time <- sqrt(t(L) %*% cov_mat %*% L)

# H0: E(time|X) <= 45；H1: E(time|X) > 45（右尾檢定）
t_stat_time <- (est_time - 45) / se_time
p_value_time <- 1 - pnorm(t_stat_time)

cat("檢定 (g) - 準時到達：估計時間 = ", est_time,
    ", SE = ", se_time,
    ", t = ", t_stat_time,
    ", p = ", p_value_time, "\n")

data$predicted <- predict(model)

ggplot(data, aes(x = predicted, y = time)) +
  geom_point(alpha = 0.6, color = "#8e44ad") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
  labs(
    title = "模型預測值與實際值比較",
    x = "預測通勤時間",
    y = "實際通勤時間"
  ) +
  theme_minimal()

# (h) 討論：若必須保證準時，假設應反轉 ----
# H0: 可能遲到（E(time|X) > 45） vs. H1: 能準時（E(time|X) <= 45）
cat("檢定 (h) - 若 Bill 必須準時，應反轉假設設定，並重新評估 Type I / II 錯誤的意義。\n")

cat("檢定 (h) - 若 Bill 必須準時，應反轉假設設定，並重新評估 Type I / II 錯誤的意義。\n")
