# 設定資料集的 URL
url <- "https://www.principlesofeconometrics.com/poe5/data/rdata/cex5_small.rdata"
download.file(url, destfile = "cex5_small.rdata")  # 下載資料集並儲存為本地檔案
load("cex5_small.rdata")  # 載入資料集
names(cex5_small)  # 確認變數名稱

# 載入必要的套件
library(ggplot2)
library(moments)

# 讀取數據 (已載入 cex5_small.rdata)
data <- cex5_small  # 使用簡單變數名稱

# 4.29(a)
# 計算描述統計量
summary_stats <- function(x) {
  return(c(N = sum(!is.na(x)),
           Mean = mean(x, na.rm = TRUE),
           Median = median(x, na.rm = TRUE),
           Min = min(x, na.rm = TRUE),
           Max = max(x, na.rm = TRUE),
           SD = sd(x, na.rm = TRUE)))
}

food_stats <- summary_stats(data$food)
income_stats <- summary_stats(data$income)

# 顯示描述統計量
stats_table <- data.frame(Food = food_stats,
                          Income = income_stats)
print(stats_table)

# 繪製直方圖（標示平均數與中位數）
plot_histogram <- function(data, var_name) {
  mean_val <- mean(data, na.rm = TRUE)
  median_val <- median(data, na.rm = TRUE)
  
  ggplot(data.frame(x = data), aes(x = x)) +
    geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "blue", alpha = 0.5, color = "black") +
    geom_vline(aes(xintercept = mean_val, color = "Mean"), linetype = "dashed", linewidth = 1) +
    geom_vline(aes(xintercept = median_val, color = "Median"), linetype = "dashed", linewidth = 1) +
    scale_color_manual(name = "Statistics", values = c("Mean" = "red", "Median" = "green")) +
    labs(title = paste("Histogram of", var_name),
         x = var_name, y = "Density") +
    theme_minimal()
}

plot_histogram(data$food, "Food")  # 繪製 food 直方圖
plot_histogram(data$income, "Income")  # 繪製 income 直方圖

# Jarque-Bera 常態性檢定
jb_test <- function(x) {
  skewness_x <- skewness(x, na.rm = TRUE)
  kurtosis_x <- kurtosis(x, na.rm = TRUE)
  n <- sum(!is.na(x))
  jb_stat <- (n/6) * (skewness_x^2 + (1/4) * (kurtosis_x - 3)^2)
  p_value <- 1 - pchisq(jb_stat, df = 2)
  return(c(JB_Statistic = jb_stat, P_Value = p_value))
}

food_jb <- jb_test(data$food)
income_jb <- jb_test(data$income)
jb_table <- data.frame(Food = food_jb,  # 顯示 Jarque-Bera 檢定結果
                       Income = income_jb)
print(jb_table)


# 4.29(b)
# 執行線性回歸：FOOD = β1 + β2 * INCOME + e
lm_model <- lm(food ~ income, data = data)
summary(lm_model)  # 顯示線性回歸的回歸結果

# 提取 β2（income 的迴歸係數）的 95% 信賴區間
conf_interval <- confint(lm_model, level = 0.95)  
print(conf_interval)

# 繪製線性回歸的散佈圖與回歸線
ggplot(data, aes(x = income, y = food)) +
  geom_point(alpha = 0.5, color = "blue") +  # 繪製資料點
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # 添加回歸線
  labs(title = "Linear Model: FOOD vs INCOME",
       x = "Income", y = "Food Expenditure") +
  theme_minimal()


# 4.29(c)
# 計算線性回歸的殘差
residuals_lm <- resid(lm_model)  # 取得最小平方法殘差

# 繪製線性回歸的殘差散佈圖
ggplot(data, aes(x = income, y = residuals_lm)) +
  geom_point(alpha = 0.5, color = "blue") +  # 散佈圖
  labs(title = "Plot of Linear Model Residuals",
       x = "Income", y = "Residuals") +
  theme_minimal()

# 繪製線性回歸的殘差直方圖
ggplot(data.frame(residuals_lm), aes(x = residuals_lm)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "blue", alpha = 0.5, color = "black") +
  geom_vline(aes(xintercept = mean(residuals_lm), color = "Mean"), linetype = "dashed", linewidth = 1) +
  geom_vline(aes(xintercept = median(residuals_lm), color = "Median"), linetype = "dashed", linewidth = 1) +
  scale_color_manual(name = "Statistics", values = c("Mean" = "red", "Median" = "green")) +
  labs(title = "Histogram of Linear Model Residuals",
       x = "Residuals", y = "Density") +
  theme_minimal()

# 進行 Jarque-Bera 常態性檢定
jb_test_residuals_linear <- function(x) {
  skewness_x <- skewness(x, na.rm = TRUE)
  kurtosis_x <- kurtosis(x, na.rm = TRUE)
  n <- length(x)
  jb_stat <- (n/6) * (skewness_x^2 + (1/4) * (kurtosis_x - 3)^2)
  p_value <- 1 - pchisq(jb_stat, df = 2)
  
  return(c(JB_Statistic = jb_stat, P_Value = p_value))
}

jb_residuals_linear <- jb_test_residuals_linear(residuals_lm)
jb_table_residuals_linear <- data.frame(Residuals = jb_residuals_linear)  # 顯示 Jarque-Bera 檢定結果
print(jb_table_residuals_linear)


# 4.29(d)
# 指定不同的 INCOME 水準
income_values <- data.frame(income = c(19, 65, 160))

# 計算預測食品支出及其信賴區間
predictions <- predict(lm_model, newdata = income_values, interval = "confidence", level = 0.95)

beta2 <- coef(lm_model)["income"]  # 取出 β2（income 的迴歸係數）
beta2_se <- summary(lm_model)$coefficients["income", "Std. Error"]  # 取出 β2 標準誤
elasticity_point <- beta2 * income_values$income / predictions[, "fit"]  # 計算彈性 (ε̂)
elasticity_se <- beta2_se * income_values$income / predictions[, "fit"]  # 計算彈性標準誤 (se(ε̂))

# 計算 95% 信賴區間 (LB, UB)
elasticity_lower <- elasticity_point - 1.96 * elasticity_se
elasticity_upper <- elasticity_point + 1.96 * elasticity_se

# 建立結果表格
elasticity_table <- data.frame(
  INCOME = income_values$income,
  point_estimation = round(predictions[, "fit"], 4),
  ε = round(elasticity_point, 4),
  se_ε = round(elasticity_se, 5),
  ε_LB = round(elasticity_lower, 4),
  ε_UB = round(elasticity_upper, 4)
)
print(elasticity_table)


# 4.29(e)
# 取對數轉換變數，並移除 FOOD 或 INCOME 為 0 的觀測值，以避免 log(0) 問題
data_log <- subset(data, food > 0 & income > 0)  # 確保沒有 0 值
data_log$ln_food <- log(data_log$food)
data_log$ln_income <- log(data_log$income)

log_log_model <- lm(ln_food ~ ln_income, data = data_log)  # 執行對數-對數回歸
summary(log_log_model)  # 顯示回歸結果
data_log$food_pred <- exp(predict(log_log_model, newdata = data_log))  # 取得預測值轉換回原始尺度

# 繪製對數-對數散佈圖與最小平方法回歸線
ggplot(data_log, aes(x = income, y = food)) +
  geom_point(alpha = 0.5, color = "blue") +  # 繪製資料點
  geom_line(aes(y = food_pred), color = "red", linewidth = 1) +  # 添加來自對數模型的回歸線
  labs(title = "Log-Log Model: FOOD vs INCOME",
       x = "Income", y = "Food Expenditure") +
  theme_minimal()

# 計算 Generalized R²
generalized_r2_corr <- function(actual, predicted) {
  r_g <- cor(actual, predicted)^2  # 計算相關係數平方
  return(r_g)
}

# 計算 Log-Log Model 的 Generalized R²
generalized_r2_log_log <- generalized_r2_corr(data_log$food, data_log$food_pred)  

r2_linear <- summary(lm_model)$r.squared  # 取得線性模型的 R^2
r2_log_log <- summary(log_log_model)$r.squared  # 取得Log-Log Model的 R^2
r2_comparison <- data.frame(    # 建立數據框做比較
  Model = c("Linear Model", "Log-Log Model"),
  R2 = c(r2_linear, r2_log_log),
  Generalized_R2 = c(NA, generalized_r2_log_log)  # 線性模型沒有 Generalized R^2，因此填入 NA
)
print(r2_comparison)
