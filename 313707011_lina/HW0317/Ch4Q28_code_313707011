# 設定資料集的 URL
url <- "https://www.principlesofeconometrics.com/poe5/data/rdata/wa_wheat.rdata"
download.file(url, destfile = "wa_wheat.rdata")  # 下載資料集並儲存為本地檔案
load("wa_wheat.rdata")  # 載入資料集
names(wa_wheat)  # 確認變數名稱

# 4.28(a)
# 建立 Northampton 區的數據框
northampton_data <- data.frame(
  YIELD = wa_wheat$northampton, 
  TIME = wa_wheat$time
)

model1 <- lm(YIELD ~ TIME, data = northampton_data)  # 模型 1: 線性回歸 YIELD = β0 + β1TIME + e
northampton_data$ln_TIME <- log(northampton_data$TIME)  # 模型 2: 線性-對數回歸 YIELD = α0 + α1 ln(TIME) + e
model2 <- lm(YIELD ~ ln_TIME, data = northampton_data)
northampton_data$TIME2 <- northampton_data$TIME^2  # 模型 3: 二次回歸 YIELD = γ0 + γ1TIME^2 + e
model3 <- lm(YIELD ~ TIME2, data = northampton_data)
northampton_data$ln_YIELD <- log(northampton_data$YIELD)  # 模型 4: 對數-線性回歸 ln(YIELD) = ϕ0 + ϕ1TIME + e
model4 <- lm(ln_YIELD ~ TIME, data = northampton_data)

# 繪製回歸擬合圖
par(mfrow = c(2, 2))  # 設定 2x2 圖形排列
plot(northampton_data$TIME, northampton_data$YIELD, main = "Linear Model",
     xlab = "TIME", ylab = "YIELD", col = "blue", pch = 16)
lines(northampton_data$TIME, fitted(model1), col = "red", lwd = 2)
plot(northampton_data$TIME, northampton_data$YIELD, main = "Linear-Log Model",
     xlab = "TIME", ylab = "YIELD", col = "blue", pch = 16)
lines(northampton_data$TIME, fitted(model2), col = "red", lwd = 2)
plot(northampton_data$TIME, northampton_data$YIELD, main = "Quadratic Model",
     xlab = "TIME", ylab = "YIELD", col = "blue", pch = 16)
lines(northampton_data$TIME, fitted(model3), col = "red", lwd = 2)
plot(northampton_data$TIME, northampton_data$YIELD, main = "Log-Linear Model",
     xlab = "TIME", ylab = "YIELD", col = "blue", pch = 16)
lines(northampton_data$TIME, exp(fitted(model4)), col = "red", lwd = 2)  # 轉回 YIELD

# 殘差分析
par(mfrow = c(2, 2))  # 設定 2x2 圖形排列
plot(model1$residuals, main = "Residuals: Linear Model", ylab = "Residuals", xlab = "Index", col = "blue", pch = 16)
plot(model2$residuals, main = "Residuals: Linear-Log Model", ylab = "Residuals", xlab = "Index", col = "blue", pch = 16)
plot(model3$residuals, main = "Residuals: Quadratic Model", ylab = "Residuals", xlab = "Index", col = "blue", pch = 16)
plot(model4$residuals, main = "Residuals: Log-Linear Model", ylab = "Residuals", xlab = "Index", col = "blue", pch = 16)

# 繪製殘差直方圖
par(mfrow = c(2, 2))  # 設定 2x2 圖形排列
hist(model1$residuals, main = "Histogram of Residuals (Linear Model)", col = "blue")
hist(model2$residuals, main = "Histogram of Residuals (Linear-Log Model)", col = "blue")
hist(model3$residuals, main = "Histogram of Residuals (Quadratic Model)", col = "blue")
hist(model4$residuals, main = "Histogram of Residuals (Log-Linear Model)", col = "blue")

# 繪製QQ圖
par(mfrow = c(2, 2))  # 設定 2x2 圖形排列
qqnorm(model1$residuals, main = "Q-Q Plot: Linear Model")
qqline(model1$residuals, col = "red")
qqnorm(model2$residuals, main = "Q-Q Plot: Linear-Log Model")
qqline(model2$residuals, col = "red")
qqnorm(model3$residuals, main = "Q-Q Plot: Quadratic Model")
qqline(model3$residuals, col = "red")
qqnorm(model4$residuals, main = "Q-Q Plot: Log-Linear Model")
qqline(model4$residuals, col = "red")

library(tseries)
# 使用 Jarque-Bera 檢定來檢查殘差是否符合常態分布
jb_test1 <- jarque.bera.test(model1$residuals)
jb_test2 <- jarque.bera.test(model2$residuals)
jb_test3 <- jarque.bera.test(model3$residuals)
jb_test4 <- jarque.bera.test(model4$residuals)

# 整理 Jarque-Bera 檢定結果
jb_values <- data.frame(
  Model = c("Linear", "Linear-Log", "Quadratic", "Log-Linear"),
  JB_p_value = c(jb_test1$p.value, jb_test2$p.value, 
                 jb_test3$p.value, jb_test4$p.value)
)

# 計算 R² 值
r2_values <- data.frame(
  Model = c("Linear", "Linear-Log", "Quadratic", "Log-Linear"),
  R2 = c(summary(model1)$r.squared, summary(model2)$r.squared, 
         summary(model3)$r.squared, summary(model4)$r.squared)
)

# 輸出結果
cat("Jarque-Bera Normality Test (p-values):\n")
print(jb_values)

cat("R² Values:\n")
print(r2_values)

# 4.28(b)
summary(model3)  # 顯示回歸結果摘要

# 4.28(c)
library(ggplot2)
library(dplyr)
# 計算學生化殘差
student_resid <- rstudent(model3)  
outliers_resid <- which(abs(student_resid) > 2)  # 找出異常值
student_resid_table <- data.frame(    # 建立結果表格
  Observation = 1:length(student_resid),
  Studentized_Residual = student_resid,
  Outlier_Residual = ifelse(abs(student_resid) > 2, "YES", "NO")
)
# 畫圖
ggplot(student_resid_table, aes(x = Observation, y = Studentized_Residual)) +
  geom_point(aes(color = Outlier_Residual)) +
  geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
  labs(title = "Studentized Residuals", y = "Studentized Residual", x = "Observation") +
  theme_minimal()
# 過濾異常觀測值
abnormal_resid_points <- student_resid_table %>%
  filter(Outlier_Residual == "YES")
# 顯示異常學生化殘差的觀測點
print(abnormal_resid_points)

# 計算 Leverage 值
leverage_values <- hatvalues(model3)  # R 內建計算 hat matrix 的對角線值
N <- length(northampton_data$YIELD)  # 觀測值數量
K <- 2  # 回歸模型中的變數數量
h_bar <- K / N  # 計算槓桿值的平均值 h_bar = 2/N
leverage_threshold_2x <- 2 * h_bar  # 設定異常標準: 2 倍平均槓桿值
high_leverage_2x <- which(leverage_values > leverage_threshold_2x)  # 找出高槓桿點
leverage_table <- data.frame(    # 建立結果表格
  Observation = 1:N,
  Leverage = leverage_values,
  High_Leverage_2x = ifelse(leverage_values > leverage_threshold_2x, "YES", "NO")
)
# 畫圖
ggplot(leverage_table, aes(x = Observation, y = Leverage)) +
  geom_point(aes(color = High_Leverage_2x)) +
  geom_hline(yintercept = 2 * h_bar, linetype = "dashed", color = "red") +
  labs(title = "LEVERAGE", y = "Leverage", x = "Observation") +
  theme_minimal()
# 過濾異常觀測值
abnormal_leverage_points <- leverage_table %>%    
  filter(High_Leverage_2x == "YES")
# 印出異常槓桿值的觀測點
print(abnormal_leverage_points)

# 計算 DFBETAS
dfbetas_values <- dfbetas(model3)  
dfbetas_threshold <- 2 / sqrt(N)  # 計算判斷標準
high_dfbetas <- which(abs(dfbetas_values[,2]) > dfbetas_threshold)  # 找出影響 TIME2 變數的異常值
dfbetas_table <- data.frame(    # 建立結果表格
  Observation = 1:N,
  DFBETAS_TIME2 = dfbetas_values[,2],  # 只查看 TIME2 變數的影響
  Influential_DFBETAS = ifelse(abs(dfbetas_values[,2]) > dfbetas_threshold, "YES", "NO")
)
# 畫圖
ggplot(dfbetas_table, aes(x = Observation)) +
  geom_segment(aes(xend = Observation, y = 0, yend = DFBETAS_TIME2,
                   color = Influential_DFBETAS), size = 0.8) +
  geom_hline(yintercept = c(-dfbetas_threshold, dfbetas_threshold),
             linetype = "dashed", color = "red") +
  labs(title = "DFBETAS",
       y = "DFBETAS", x = "Observation") +
  theme_minimal()
# 過濾異常觀測值
abnormal_dfbetas_points <- dfbetas_table %>%    
  filter(Influential_DFBETAS == "YES")
# 顯示異常 DFBETAS 觀測點
print(abnormal_dfbetas_points)

# 計算 DFFITS
dffits_values <- dffits(model3)
dffits_threshold_2x <- 2 * sqrt(K / N)  # 設定異常標準: 2 倍標準
high_dffits_2x <- which(abs(dffits_values) > dffits_threshold_2x) # 找出異常 DFFITS
dffits_table <- data.frame(    # 建立結果表格
  Observation = 1:N,
  DFFITS = dffits_values,
  High_DFFITS_2x = ifelse(abs(dffits_values) > dffits_threshold_2x, "YES", "NO")
)
# 畫圖
ggplot(dffits_table, aes(x = Observation, y = DFFITS)) +
  geom_point(aes(color = High_DFFITS_2x)) +
  geom_hline(yintercept = c(-dffits_threshold_2x, dffits_threshold_2x), 
             linetype = "dashed", color = "red") +
  labs(title = "DFFITS", y = "DFFITS", x = "Observation") +
  theme_minimal()
# 過濾異常觀測值
abnormal_dffits_points <- dffits_table %>%    
  filter(High_DFFITS_2x == "YES")
# 顯示異常 DFFITS 觀測點
print(abnormal_dffits_points)

# 2x2 子圖排版
par(mfrow = c(2, 2))
# Studentized Residuals
plot(student_resid, main = "Studentized Residuals",
     ylab = "studentized_residuals", xlab = "INDEX", pch = 1)
abline(h = c(-2, 2), col = "red", lwd = 2)
# LEVERAGE
plot(leverage_values, main = "LEVERAGE",
     ylab = "leverage_values", xlab = "INDEX", pch = 1)
abline(h = leverage_threshold_2x, col = "red", lwd = 2)
# DFBETAS
dfb_time2 <- dfbetas(model3)[, 2]
plot(dfb_time2, type = "h", main = "DFBETAS",
     ylab = "dfbetas_plot", xlab = "Index",
     col = ifelse(abs(dfb_time2) > dfbetas_threshold, "red", "black"))
abline(h = c(-dfbetas_threshold, dfbetas_threshold), col = "red", lwd = 2)
# DFFITS
plot(dffits_values, main = "DFFITS",
     ylab = "dffits(model3)", xlab = "Index", pch = 1)
abline(h = c(-dffits_threshold_2x, dffits_threshold_2x), col = "red", lwd = 2)


# 4.28(d)
train_data <- northampton_data %>% filter(TIME <= 47)  # 過濾 1996 年之前的數據來建立新模型
model_restricted <- lm(YIELD ~ TIME2, data = train_data)  # 重新估計所選模型（假設為 model3，即二次回歸模型）
new_data_1997 <- data.frame(TIME2 = 48^2)  # 設定 1997 年的預測值

# 計算 95% 預測區間
prediction_1997 <- predict(model_restricted, newdata = new_data_1997, interval = "prediction", level = 0.95)
print(prediction_1997)  # 顯示預測結果

# 檢查 1997 年的真實值是否落在預測區間內
true_value_1997 <- northampton_data$YIELD[northampton_data$TIME == 48]
cat("1997 年的真實值:", true_value_1997, "\n")

