# 4.4
(a)
# 設定工作經驗 (EXPER) 從 0 到 30 年
EXPER <- 0:30
# 模型 1 的回歸方程式
RATING_Model1 <- 64.289 + 0.990 * EXPER

# 繪圖
plot(EXPER, RATING_Model1, type = "l", col = "blue", xlab = "Years of Experience", ylab = "Performance Rating", main = "Fitted Values from Model 1")

(b)
# 設定工作經驗 (EXPER) 從 1 到 30 年
EXPER2 <- 1:30
# 模型 2 的回歸方程式
RATING_Model2 <- 39.464 + 15.312 * log(EXPER2)

# 繪圖
plot(EXPER2, RATING_Model2, type = "l", col = "red", xlab = "Years of Experience", ylab = "Performance Rating", main = "Fitted Values from Model 2")

(c)
# 設定不同的工作經驗年數
years_10 <- 10
years_20 <- 20

# 計算邊際效應，對模型 1 來說是固定的
marginal_effect <- 0.990

# 顯示結果
marginal_effect_10 <- marginal_effect
marginal_effect_20 <- marginal_effect

marginal_effect_10
marginal_effect_20

(d)
# 模型 2 的邊際效應公式
marginal_effect_model2 <- function(EXPER) {
  return(15.312 / EXPER)
}

# 計算 10 年和 20 年經驗的邊際效應
marginal_effect_10_model2 <- marginal_effect_model2(10)
marginal_effect_20_model2 <- marginal_effect_model2(20)

# 顯示結果
marginal_effect_10_model2
marginal_effect_20_model2

#4.28
# (a)
# 加載數據
data("wa_wheat")
# (i)提取Northampton數據
northampton_data <- wa_wheat$northampton
time <- wa_wheat$time

# 1. 線性模型
model1 <- lm(northampton_data ~ time)

# 2. 對數模型
model2 <- lm(northampton_data ~ log(time))

# 3. 二次模型
model3 <- lm(northampton_data ~ I(time^2))

# 4. 對數線性模型
model4 <- lm(log(northampton_data) ~ time)

# 印出四個模型的回歸係數
# 模型1（線性模型）
summary(model1)$coefficients

# 模型2（對數模型）
summary(model2)$coefficients

# 模型3（二次模型）
summary(model3)$coefficients

# 模型4（對數線性模型）
summary(model4)$coefficients

# (ii)畫四張擬合的方程式圖
par(mfrow=c(2,2))  # 設置為2x2的圖形矩陣

# 畫線性模型
plot(time, northampton_data, main="Linear Model", xlab="Time", ylab="Yield")
lines(time, predict(model1), col="red", lwd=2)

# 畫對數模型
plot(time, northampton_data, main="Log Model", xlab="Time", ylab="Yield")
lines(time, predict(model2), col="blue", lwd=2)

# 畫二次模型
plot(time, northampton_data, main="Quadratic Model", xlab="Time", ylab="Yield")
lines(time, predict(model3), col="green", lwd=2)

# 畫對數線性模型
plot(time, northampton_data, main="Log-Linear Model", xlab="Time", ylab="Yield")
lines(time, exp(predict(model4)), col="purple", lwd=2)

# 繪製殘差圖
par(mfrow=c(2,2))
plot(model1$residuals, main="Residuals of Linear Model")
plot(model2$residuals, main="Residuals of Log Model")
plot(model3$residuals, main="Residuals of Quadratic Model")
plot(model4$residuals, main="Residuals of Log-Linear Model")

# (iii)錯誤正態性檢驗
shapiro.test(model1$residuals)
shapiro.test(model2$residuals)
shapiro.test(model3$residuals)
shapiro.test(model4$residuals)

# 查看R^2
summary(model1)$r.squared
summary(model2)$r.squared
summary(model3)$r.squared
summary(model4)$r.squared

(c)
# 計算Studentized Residuals
studentized_residuals <- rstudent(model3)

# 將學生化殘差與觀測點編號一起列出
data.frame(Observation = 1:length(studentized_residuals), Studentized_Residuals = studentized_residuals)

# 計算Leverage
leverage_values <- hatvalues(model3)

# 將杠杆值與觀測點編號一起列出
data.frame(Observation = 1:length(leverage_values), Leverage = leverage_values)

# 計算 DFBETAS
dfbetas_values <- dfbetas(model3)

# 將 DFBETAS 值與觀測點編號一起列出
data.frame(Observation = 1:nrow(dfbetas_values), DFBETAS = dfbetas_values)

# 計算 DFFITS
dffits_values <- dffits(model3)

# 將 DFFITS 值與觀測點編號一起列出
data.frame(Observation = 1:length(dffits_values), DFFITS = dffits_values)

# 合併所有結果
influence_measures <- data.frame(
  Observation = 1:length(studentized_residuals),
  Studentized_Residuals = studentized_residuals,
  Leverage = leverage_values,
  DFBETAS = dfbetas_values[, 1],  # 這裡假設只列出第一個參數的 DFBETAS
  DFFITS = dffits_values
)

# 顯示所有結果
print(influence_measures)

(d)
data1996 <-subset(wa_wheat,time<48)
data1997 <-subset(wa_wheat,time==48)
lm428_d <-lm(yield ~ I(Time^2), data = data1996)
pred_i <-predict(lm428_d, newdata = data.frame(Time = 48), interval = "predict", level = 0.95)
if(data1997$northampton>=pred_i[1,'lwr']&&data1997$northampton<=pred_i[1,'upr']){
print('Do contain the true value')
}else{
print('Do not contain the true value')
}
pred_i

4.29
#4.29 (a)
# 安裝tseries包
install.packages("tseries")

# 加載tseries包
library(tseries)
library(tseries)
library(ggplot2)

# 計算描述性統計量並加上樣本數量
summary_stats <- data.frame(
  Variable = c("FOOD", "INCOME"),
  N = c(length(cex5_small$food), length(cex5_small$income)),  # 顯示樣本數量
  Mean = c(mean(cex5_small$food), mean(cex5_small$income)),
  Median = c(median(cex5_small$food), median(cex5_small$income)),
  Min = c(min(cex5_small$food), min(cex5_small$income)),
  Max = c(max(cex5_small$food), max(cex5_small$income)),
  SD = c(sd(cex5_small$food), sd(cex5_small$income))
)

# 打印描述性統計量
print(summary_stats)

# 繪製food的直方圖並標註均值和中位數
ggplot(cex5_small, aes(x = food)) + 
  geom_histogram(binwidth = 10, fill = "blue", alpha = 0.6) +
  geom_vline(aes(xintercept = mean(food)), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median(food)), color = "green", linetype = "dashed", size = 1) +
  ggtitle("Histogram of FOOD with Mean and Median") +
  theme_minimal()

# 自動選擇binwidth並繪製income的直方圖
ggplot(cex5_small, aes(x = income)) + 
  geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.6) +
  geom_vline(aes(xintercept = mean(income)), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median(income)), color = "green", linetype = "dashed", size = 1) +
  ggtitle("Histogram of INCOME with Mean and Median") +
  theme_minimal()

# 進行Jarque-Bera正態性檢驗
jarque.bera.test(cex5_small$food)
jarque.bera.test(cex5_small$income)

#4.29 (b)
# 1. 估算線性回歸模型
model <- lm(food ~ income, data = cex5_small)

# 2. 打印回歸結果
summary(model)

# 3. 繪製散佈圖並加上擬合的最小二乘線
ggplot(cex5_small, aes(x = income, y = food)) +
  geom_point(color = "blue", alpha = 0.6) +  # 散佈圖
  geom_smooth(method = "lm", color = "red", linetype = "dashed") +  # 最小二乘擬合線
  ggtitle("FOOD vs INCOME with Fitted Least Squares Line") +
  theme_minimal()

# 4. 構建95%置信區間估計
confint(model, level = 0.95)  # 計算beta2的95%置信區間


#4.29 (c)
# 獲取回歸模型的最小二乘殘差
residuals <- residuals(model)

# 1. 繪製殘差與INCOME的散佈圖
ggplot(cex5_small, aes(x = income, y = residuals)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Residuals vs INCOME") +
  theme_minimal()

# 2. 殘差的直方圖
ggplot(data.frame(residuals), aes(x = residuals)) +
  geom_histogram(binwidth = 10, fill = "blue", alpha = 0.6) +
  ggtitle("Histogram of Residuals") +
  theme_minimal()

# 3. 進行Jarque-Bera檢驗
jarque.bera.test(residuals)

#4.29 (d)
# 假設模型已經建立（model）

# 1. 計算回歸係數
beta2 <- coef(model)["income"]
beta1 <- coef(model)["(Intercept)"]  # 取得截距項b1

# 2. 計算收入在19, 65, 160時的點估計與區間估計
income_values <- c(19, 65, 160)

# 3. 計算食物支出的點估計
food_estimates <- predict(model, newdata = data.frame(income = income_values))

# 4. 計算收入彈性
elasticities <- beta2 * income_values / food_estimates

# 5. 計算收入彈性區間
conf_intervals_income <- confint(model)["income", ]  # 提取收入的置信區間

# 6. 重新計算區間估計
elasticity_intervals <- matrix(NA, nrow = length(income_values), ncol = 2)

for (i in 1:length(income_values)) {
  # 取得該收入值對應的食物支出預測值
  food_point <- food_estimates[i]
  income_point <- income_values[i]
  
  # 計算基於置信區間的彈性區間
  lower_bound <- (conf_intervals_income[1] * income_point) / food_point  # 置信區間下限
  upper_bound <- (conf_intervals_income[2] * income_point) / food_point  # 置信區間上限
  elasticity_intervals[i, ] <- c(lower_bound, upper_bound)
}

# 7. 計算 b1 + b2*INCOME 的結果和標準誤
b1_b2_income <- beta1 + beta2 * income_values
# 使用回歸模型的預測標準誤來計算每個收入值對應的標準誤
se_b1_b2_income <- predict(model, newdata = data.frame(income = income_values), se.fit = TRUE)$se.fit

# 8. 計算彈性標準誤 (基於回歸係數的標準誤)
# 彈性標準誤 = |d(ê)/d(β2)| * se(β2)
se_elasticities <- abs(income_values / food_estimates) * se_b1_b2_income

# 印出結果
cat("b1 + b2*INCOME 和標準誤結果：\n")
print(data.frame(INCOME = income_values, 
                 `b1 + b2*INCOME` = b1_b2_income, 
                 `Standard Error` = se_b1_b2_income))

cat("\n彈性和區間估計：\n")
# 印出彈性估計、區間估計及彈性標準誤
print(data.frame(INCOME = income_values, 
                 Elasticity = elasticities, 
                 `se(Elasticity)` = se_elasticities,
                 LB = elasticity_intervals[, 1], 
                 UB = elasticity_intervals[, 2]))

#4.29 (e)
# 1. 估算log-log模型
log_log_model <- lm(log(food) ~ log(income), data = cex5_small)

# 2. 繪製log-log散佈圖並添加最小二乘擬合線
ggplot(cex5_small, aes(x = log(income), y = log(food))) + 
  geom_point(color = "blue", alpha = 0.6) +
  geom_smooth(method = "lm", color = "red", linetype = "dashed") +
  ggtitle("Log-Log Model: ln(FOOD) vs ln(INCOME)") +
  theme_minimal()

# 3. 計算log-log模型的R^2
log_log_r_squared <- summary(log_log_model)$r.squared

# 4. 計算線性回歸模型的R^2
linear_model <- lm(food ~ income, data = cex5_small)
linear_r_squared <- summary(linear_model)$r.squared

# 5. 計算log-log模型的廣義R^2（Generalized R-squared）
log_log_fitted_values <- fitted(log_log_model)
log_log_residuals <- residuals(log_log_model)

total_variance <- sum((log(cex5_small$food) - mean(log(cex5_small$food)))^2)
explained_variance <- sum((log_log_fitted_values - mean(log(cex5_small$food)))^2)
generalized_r_squared <- explained_variance / total_variance

# 顯示結果
cat("Linear Model R^2: ", linear_r_squared, "\n")
cat("Log-Log Model R^2: ", log_log_r_squared, "\n")
cat("Log-Log Model Generalized R^2: ", generalized_r_squared, "\n")

#4.29 (f)
# 1. 提取log-log模型中的係數（彈性）
gamma2 <- coef(log_log_model)["log(income)"]  # 這是log-log模型中的彈性

# 2. 計算彈性點估計
elasticity_point_estimate <- gamma2

# 3. 計算彈性的95%置信區間
conf_intervals_gamma2 <- confint(log_log_model)["log(income)", ]  # 提取log(income)的置信區間

# 4. 打印結果
cat("Point Estimate of Elasticity (log-log model): ", elasticity_point_estimate, "\n")
cat("95% Confidence Interval for Elasticity: ", conf_intervals_gamma2, "\n")

#4.29 (g)
# 1. 取得log-log模型的最小二乘殘差
log_log_residuals <- residuals(log_log_model)

# 2. 繪製殘差與ln(INCOME)的散佈圖
ggplot(cex5_small, aes(x = log(income), y = log_log_residuals)) + 
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Residuals vs ln(INCOME) from Log-Log Model") +
  theme_minimal()

# 3. 構建殘差的直方圖
ggplot(data.frame(residuals = log_log_residuals), aes(x = residuals)) +
  geom_histogram(binwidth = 0.01, fill = "blue", alpha = 0.6) +
  ggtitle("Histogram of Residuals from Log-Log Model") +
  theme_minimal()

# 4. 進行Jarque-Bera檢驗
library(tseries)
jarque.bera.test(log_log_residuals)

#4.29 (h)
# 1. 估算線性-對數模型
linear_log_model <- lm(food ~ log(income), data = cex5_small)

# 2. 繪製FOOD對ln(INCOME)的散佈圖並添加最小二乘擬合線
ggplot(cex5_small, aes(x = log(income), y = food)) + 
  geom_point(color = "blue", alpha = 0.6) +
  geom_smooth(method = "lm", color = "red", linetype = "dashed") +
  ggtitle("Linear-Log Model: FOOD vs ln(INCOME)") +
  theme_minimal()

# 3. 計算線性-對數模型的R^2
linear_log_r_squared <- summary(linear_log_model)$r.squared

# 4. 計算log-log模型和線性模型的R^2（假設log-log_model和linear_model已經存在）
log_log_r_squared <- summary(log_log_model)$r.squared
linear_r_squared <- summary(linear_model)$r.squared

# 5. 比較結果
cat("Linear-Log Model R^2: ", linear_log_r_squared, "\n")
cat("Log-Log Model R^2: ", log_log_r_squared, "\n")
cat("Linear Model R^2: ", linear_r_squared, "\n")




#4.29 (i)
# 取得模型係數
alpha1 <- coef(linear_log_model)["(Intercept)"]
alpha2 <- coef(linear_log_model)["log(income)"]

# 設定收入值
income_values <- c(19, 65, 160)
ln_income_values <- log(income_values)

# 計算對應預測的FOOD
predicted_food <- predict(linear_log_model, newdata = data.frame(income = income_values, log.income = ln_income_values))

# 彈性 = alpha2 / predicted_food
elasticities <- alpha2 / predicted_food

# --- 計算彈性的95%信賴區間 ---

# 提取beta2的95%置信區間
conf_int <- confint(linear_log_model, "log(income)", level = 0.95)

# 使用beta2的置信區間計算彈性的區間估計
elasticity_lower <- conf_int[1] / predicted_food
elasticity_upper <- conf_int[2] / predicted_food

# 建立彈性估計結果表格
elasticity_results <- data.frame(
  INCOME = income_values,
  Predicted_FOOD = predicted_food,
  Elasticity = elasticities,
  Lower_CI = elasticity_lower,
  Upper_CI = elasticity_upper
)

# 輸出結果
print(elasticity_results)

#4.29 (j)
# 檢查INCOME的範圍
summary(cex5_small$income)

# 檢查是否有異常值
boxplot(cex5_small$income, main="Boxplot of Income")
filtered_data <- cex5_small[cex5_small$income > 10 & cex5_small$income < 150, ]

# 用過濾後的數據重新建模
linear_log_model_filtered <- lm(food ~ log(income), data = filtered_data)

# 繪製新的殘差散佈圖
residuals_filtered <- residuals(linear_log_model_filtered)
ggplot(data.frame(ln_income = log(filtered_data$income), residuals = residuals_filtered), aes(x = ln_income, y = residuals)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Residuals vs ln(INCOME) from Linear-Log Model (Filtered Data)") +
  theme_minimal()

# 繪製殘差的直方圖 
ggplot(data.frame(residuals = residuals_linear_log), aes(x = residuals)) +
  geom_histogram(binwidth = 5, fill = "blue", alpha = 0.6) +
  ggtitle("Histogram of Residuals from Linear-Log Model (Adjusted Bin Width)") +
  theme_minimal()

# 進行Jarque-Bera檢驗
library(tseries)
jarque.bera.test(residuals_linear_log)
